Nodes:
	- have a type name pointer. @done(2010-07-11)
	- can be visited.
	- have an arity range describing how many child nodes they will accept.
	- have a reference to their parent.
	Leaf nodes:
		- have a data pointer. @done(2010-07-11)
		- are nullary.
	Branch nodes:
		- have any number of child nodes. @done(2010-07-11)
		- have a definable arity range allowing fixed arity (unary, binary, ternary, etc) as well as n-arity.
		- should branch nodes specialize leaf nodes, i.e. should branch nodes have a data pointer? it seems restrictive to omit it.
Visitors:
	- generic, polymorphic implementation which can be overridden
	- specific implementations:
		- call one visit callback and one leave callback with a node name parameter
		- call one visit block and one leave block with a node name parameter
		- call one visit delegate method and one leave delegate method with a node name parameter
		- look up visit/leave callbacks by node name in a dictionary
		- look up visit/leave blocks by node name in a dictionary
		- call visit/leave delegate methods constructed with a node name
